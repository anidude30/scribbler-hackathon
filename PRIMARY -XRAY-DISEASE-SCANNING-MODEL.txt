{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>TB Detection - TensorFlow.js</title>\n  \n  <!-- Include TensorFlow.js -->\n  <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n  \n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      background-color: #f4f4f9;\n    }\n    h1 {\n      text-align: center;\n    }\n    .container {\n      display: flex;\n      justify-content: center;\n      flex-direction: column;\n      align-items: center;\n      margin-top: 20px;\n    }\n    input[type=\"file\"] {\n      margin: 20px;\n    }\n    #prediction-result {\n      font-size: 20px;\n      margin-top: 10px;\n      font-weight: bold;\n    }\n    #uploaded-image {\n      margin-top: 20px;\n      max-width: 100%;\n      height: auto;\n    }\n  </style>\n</head>\n<body>\n\n  <h1>TB Detection with TensorFlow.js</h1>\n  <div class=\"container\">\n    <input type=\"file\" id=\"file-input\" accept=\"image/*\" />\n    <div id=\"prediction-result\">Prediction will appear here...</div>\n    <img id=\"uploaded-image\" src=\"\" alt=\"Uploaded Image\" />\n  </div>\n\n  <script src=\"app.js\"></script>\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n\n\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>TB Detection - TensorFlow.js</title>\n  \n  <!-- Include TensorFlow.js -->\n  <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>\n  \n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 20px;\n      background-color: #f4f4f9;\n    }\n    h1 {\n      text-align: center;\n    }\n    .container {\n      display: flex;\n      justify-content: center;\n      flex-direction: column;\n      align-items: center;\n      margin-top: 20px;\n    }\n    input[type=\"file\"] {\n      margin: 20px;\n    }\n    #prediction-result {\n      font-size: 20px;\n      margin-top: 10px;\n      font-weight: bold;\n    }\n    #uploaded-image {\n      margin-top: 20px;\n      max-width: 100%;\n      height: auto;\n    }\n  </style>\n\n\n\n  <h1>TB Detection with TensorFlow.js</h1>\n  <div class=\"container\">\n    <input type=\"file\" id=\"file-input\" accept=\"image/*\">\n    <div id=\"prediction-result\">Prediction will appear here...</div>\n    <img id=\"uploaded-image\" src=\"\" alt=\"Uploaded Image\">\n  </div>\n\n  <script src=\"app.js\"></script>\n\n",
      "type": "html"
    },
    {
      "code": "tf=await import(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.22.0/+esm\");",
      "status": "[3]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "tf.",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected end of input</p>",
      "type": "code"
    },
    {
      "code": "const modelUrl = 'https://raw.githubusercontent.com/anidude30/scribbler-hackathon/refs/heads/main/model.json';\nconst modelWeightsUrl = 'https://raw.githubusercontent.com/anidude30/scribbler-hackathon/refs/heads/main/weights.bin';\n\nasync function loadModel() {\n  try {\n    console.log('Loading model from:', modelUrl); // Log URL to ensure it's correct\n    const model = await tf.loadLayersModel(tf.io.browserHTTPRequest(modelUrl, {\n      weightPathPrefix: modelWeightsUrl.slice(0, modelWeightsUrl.lastIndexOf('/') + 1),\n    }));\n    console.log('Model loaded successfully:', model);\n    return model;\n  } catch (error) {\n    console.error('Error loading model:', error); // Log detailed error\n    document.getElementById('prediction-result').innerText = 'Failed to load the model. Please check the console for details.';\n    return null;\n  }\n}\n\n// Set up model loading as a promise\nconst modelPromise = loadModel();\n\n// Display loading message until the model loads\ndocument.getElementById('prediction-result').innerText = 'Loading model...';\n\n// Set up event listener for file input\ndocument.getElementById('file-input').addEventListener('change', async (event) => {\n  const file = event.target.files[0];\n  if (!file) return;\n\n  const reader = new FileReader();\n  reader.onload = async function (e) {\n    const img = new Image();\n    img.src = e.target.result;\n\n    img.onload = async function () {\n      // Display the uploaded image as a thumbnail\n      const uploadedImage = document.getElementById('uploaded-image');\n      uploadedImage.src = img.src;\n\n      console.log('Image loaded for prediction.');\n\n      // Convert image to tensor (adjust input shape for the model)\n      const imageTensor = tf.browser.fromPixels(img)\n        .resizeNearestNeighbor([128, 128])  // Adjust size according to your model\n        .toFloat()\n        .div(tf.scalar(255.0))  // Normalize to [0, 1]\n        .expandDims();  // Add batch dimension\n\n      console.log('Image tensor created:', imageTensor.shape); // Log the tensor shape\n\n      // Wait for the model to load before predicting\n      const model = await modelPromise;\n\n      if (model) {\n        // Make a prediction with the model\n        try {\n          console.log('Making prediction...');\n          const prediction = model.predict(imageTensor);\n\n          // Debugging step: Log the prediction tensor\n          prediction.print(); // Check the output shape and data\n\n          // Get the predicted class\n          const predictedClass = prediction.argMax(-1).dataSync()[0];\n          console.log('Predicted Class:', predictedClass);\n\n          // Display the prediction result\n          const resultText = predictedClass === 1 ? 'Tuberculosis detected!' : 'No Tuberculosis detected';\n          document.getElementById('prediction-result').innerText = resultText;\n        } catch (error) {\n          console.error('Error during prediction:', error);\n          document.getElementById('prediction-result').innerText = 'Error during prediction. Check console for details.';\n        }\n      } else {\n        document.getElementById('prediction-result').innerText = 'Model failed to load. Please refresh the page.';\n      }\n    };\n  };\n  reader.readAsDataURL(file);  // Read the uploaded file as a data URL\n});\n\n/*const modelUrl = 'https://raw.githubusercontent.com/anidude30/scribbler-hackathon/refs/heads/main/model.json'; // Raw URL for model.json\nconst modelWeightsUrl = 'https://raw.githubusercontent.com/anidude30/scribbler-hackathon/refs/heads/main/weights.bin'; // Raw URL for binary file\n\n\nasync function loadModel() {\n  try {\n    console.log('Loading model from:', modelUrl); // Log the URL to ensure it's correct\n    const model = await tf.loadLayersModel(modelUrl);\n    console.log('Model loaded successfully:', model);\n    return model;\n  } catch (error) {\n    console.error('Error loading model:', error); // Log detailed error\n    document.getElementById('prediction-result').innerText = 'Failed to load the model. Please check the console for details.';\n  }\n}\n\n// Set up model loading as a promise\nconst modelPromise = loadModel();\n\n// Display loading message until the model loads\ndocument.getElementById('prediction-result').innerText = 'Loading model...';\n\n// Set up event listener for file input\ndocument.getElementById('file-input').addEventListener('change', async (event) => {\n  const file = event.target.files[0];\n  if (!file) return;\n\n  const reader = new FileReader();\n  reader.onload = async function (e) {\n    const img = new Image();\n    img.src = e.target.result;\n\n    img.onload = async function () {\n      // Display the uploaded image as a thumbnail\n      const uploadedImage = document.getElementById('uploaded-image');\n      uploadedImage.src = img.src;\n\n      console.log('Image loaded for prediction.');\n\n      // Convert image to tensor (adjust input shape for the model)\n      const imageTensor = tf.browser.fromPixels(img)\n        .resizeNearestNeighbor([128, 128])  // Adjust size according to your model\n        .toFloat()\n        .div(tf.scalar(255.0))  // Normalize to [0, 1]\n        .expandDims();  // Add batch dimension\n\n      console.log('Image tensor created:', imageTensor.shape); // Log the tensor shape\n\n      // Wait for the model to load before predicting\n      const model = await modelPromise;\n\n      if (model) {\n        // Make a prediction with the model\n        try {\n          console.log('Making prediction...');\n          const prediction = model.predict(imageTensor);\n\n          // Debugging step: Log the prediction tensor\n          prediction.print(); // Check the output shape and data\n\n          // Get the predicted class\n          const predictedClass = prediction.argMax(-1).dataSync()[0];\n          console.log('Predicted Class:', predictedClass);\n\n          // Display the prediction result\n          const resultText = predictedClass === 1 ? 'Tuberculosis detected!' : 'No Tuberculosis detected';\n          document.getElementById('prediction-result').innerText = resultText;\n        } catch (error) {\n          console.error('Error during prediction:', error);\n          document.getElementById('prediction-result').innerText = 'Error during prediction. Check console for details.';\n        }\n      } else {\n        document.getElementById('prediction-result').innerText = 'Model failed to load. Please refresh the page.';\n      }\n    };\n  };\n  reader.readAsDataURL(file);  // Read the uploaded file as a data URL\n});",
      "status": "[-]",
      "output": "<p class=\"error\">Invalid or unexpected token</p>",
      "type": "code"
    },
    {
      "code": "",
      "status": "[2]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}