{
  "metadata": {
    "name": "Hackathon Scribbler Bot builders",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>TensorFlow.js: Tuberculosis Detector</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta name=\"description\" content=\"Use the power of Machine Learning to diagnose TB from chest x-rays.\">\n\t\t  \n\n\t\t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" \n\t\t\tintegrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tmin-height: 75rem;\n\t\t\t\tpadding-top: 4.5rem;\n\t\t\t}\n\n\t\t\t.bd-placeholder-img {\n\t\t\t\tfont-size: 1.125rem;\n\t\t\t\ttext-anchor: middle;\n\t\t\t\t-webkit-user-select: none;\n\t\t\t\t-moz-user-select: none;\n\t\t\t\t-ms-user-select: none;\n\t\t\t\tuser-select: none;\n\t\t\t}\n\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.bd-placeholder-img-lg {\n\t\t\t\t\tfont-size: 3.5rem;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n\t\t\t<a class=\"navbar-brand\" href=\"/index.html\">Tuberculosis Detector</a>\n\t\t\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t<span class=\"navbar-toggler-icon\"></span>\n\t\t\t</button>\n\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n\t\t\t\t<ul class=\"navbar-nav mr-auto\">\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link\" href=\"/index.html\">Home <span class=\"sr-only\">(current)</span></a>\n\t\t\t\t</li>\n\t\t\t</div>\n\t\t</nav>\n\t\t\n\t\t<main role=\"main\" class=\"container mt-5\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t<div class=\"progress progress-bar progress-bar-striped progress-bar-animated mb-2\">Loading Model</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<input id=\"image-selector\" class=\"form-control border-0\" type=\"file\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<button id=\"predict-button\" class=\"btn btn-primary float-right\">Predict</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<hr>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<h2 class=\"ml-3\">Image</h2>\n\t\t\t\t\t<img id=\"selected-image\" class=\"ml-3\" width=\"250\" alt=\"\"> \n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<h2 class=\"ml-3\">Predictions</h2>\n\t\t\t\t\t<ol id=\"prediction-list\"></ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</main>\n\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\n\t\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\n\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.2.7/dist/tf.min.js\"></script>\n\t\t<script src=\"target_classes.js\"></script>\n\t\t<script src=\"predict.js\"></script> \n\t</body>\n</html>\n",
      "status": "",
      "output": "//index.html\n\n\n\t\n\t\t<meta charset=\"utf-8\">\n\t\t<title>TensorFlow.js: Tuberculosis Detector</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta name=\"description\" content=\"Use the power of Machine Learning to diagnose TB from chest x-rays.\">\n\t\t  \n\n\t\t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tmin-height: 75rem;\n\t\t\t\tpadding-top: 4.5rem;\n\t\t\t}\n\n\t\t\t.bd-placeholder-img {\n\t\t\t\tfont-size: 1.125rem;\n\t\t\t\ttext-anchor: middle;\n\t\t\t\t-webkit-user-select: none;\n\t\t\t\t-moz-user-select: none;\n\t\t\t\t-ms-user-select: none;\n\t\t\t\tuser-select: none;\n\t\t\t}\n\n\t\t\t@media (min-width: 768px) {\n\t\t\t\t.bd-placeholder-img-lg {\n\t\t\t\t\tfont-size: 3.5rem;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t\n\t\n\t\t<nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n\t\t\t<a class=\"navbar-brand\" href=\"/index.html\">Tuberculosis Detector</a>\n\t\t\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t<span class=\"navbar-toggler-icon\"></span>\n\t\t\t</button>\n\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n\t\t\t\t<ul class=\"navbar-nav mr-auto\">\n\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t<a class=\"nav-link\" href=\"/index.html\">Home <span class=\"sr-only\">(current)</span></a>\n\t\t\t\t</li>\n\t\t\t</ul></div>\n\t\t</nav>\n\t\t\n\t\t<main role=\"main\" class=\"container mt-5\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-12\">\n\t\t\t\t\t<div class=\"progress progress-bar progress-bar-striped progress-bar-animated mb-2\">Loading Model</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<input id=\"image-selector\" class=\"form-control border-0\" type=\"file\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<button id=\"predict-button\" class=\"btn btn-primary float-right\">Predict</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<hr>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<h2 class=\"ml-3\">Image</h2>\n\t\t\t\t\t<img id=\"selected-image\" class=\"ml-3\" width=\"250\" alt=\"\"> \n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t<h2 class=\"ml-3\">Predictions</h2>\n\t\t\t\t\t<ol id=\"prediction-list\"></ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</main>\n\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\n\t\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\n\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.2.7/dist/tf.min.js\"></script>\n\t\t<script src=\"target_classes.js\"></script>\n\t\t<script src=\"predict.js\"></script> \n\t\n\n",
      "type": "html"
    },
    {
      "code": "//train\n//main.js\nconst tf = require('@tensorflow/tfjs-node-gpu');\n\nconst data = require('./data');\nconst model = require('./model');\n\nasync function run(epochs, batchSize, modelSavePath) {\n  data.loadData();\n\n  const {images: trainImages, labels: trainLabels} = data.getTrainData();\n  console.log(\"Training Images (Shape): \" + trainImages.shape);\n  console.log(\"Training Labels (Shape): \" + trainLabels.shape);\n\n  model.summary();\n\n  const validationSplit = 0.15;\n  await model.fit(trainImages, trainLabels, {\n    epochs,\n    batchSize,\n    validationSplit\n  });\n\n  const {images: testImages, labels: testLabels} = data.getTestData();\n  const evalOutput = model.evaluate(testImages, testLabels);\n\n  console.log(\n      `\\nEvaluation result:\\n` +\n      `  Loss = ${evalOutput[0].dataSync()[0].toFixed(3)}; `+\n      `Accuracy = ${evalOutput[1].dataSync()[0].toFixed(3)}`);\n\n  if (modelSavePath != null) {\n    await model.save(`file://${modelSavePath}`);\n    console.log(`Saved model to path: ${modelSavePath}`);\n  }\n}\n\nrun(100, 32, './model');",
      "status": "[-]",
      "output": "<p class=\"error\">require is not defined</p>",
      "type": "code"
    },
    {
      "code": "//data.js\nconst tf = require('@tensorflow/tfjs-node-gpu');\nconst fs = require('fs');\nconst path = require('path');\n\nconst TRAIN_IMAGES_DIR = './data/train';\nconst TEST_IMAGES_DIR = './data/test';\n\nfunction loadImages(dataDir) {\n  const images = [];\n  const labels = [];\n  \n  var files = fs.readdirSync(dataDir);\n  for (let i = 0; i < files.length; i++) { \n    if (!files[i].toLocaleLowerCase().endsWith(\".png\")) {\n      continue;\n    }\n\n    var filePath = path.join(dataDir, files[i]);\n    \n    var buffer = fs.readFileSync(filePath);\n    var imageTensor = tf.node.decodeImage(buffer)\n      .resizeNearestNeighbor([96,96])\n      .toFloat()\n      .div(tf.scalar(255.0))\n      .expandDims();\n    images.push(imageTensor);\n\n    var hasTuberculosis = files[i].toLocaleLowerCase().endsWith(\"_1.png\");\n    labels.push(hasTuberculosis ? 1 : 0);\n  }\n\n  return [images, labels];\n}\n\n/** Helper class to handle loading training and test data. */\nclass TuberculosisDataset {\n  constructor() {\n    this.trainData = [];\n    this.testData = [];\n  }\n\n  /** Loads training and test data. */\n  loadData() {\n    console.log('Loading images...');\n    this.trainData = loadImages(TRAIN_IMAGES_DIR);\n    this.testData = loadImages(TEST_IMAGES_DIR);\n    console.log('Images loaded successfully.')\n  }\n\n  getTrainData() {\n    return {\n      images: tf.concat(this.trainData[0]),\n      labels: tf.oneHot(tf.tensor1d(this.trainData[1], 'int32'), 2).toFloat()\n    }\n  }\n\n  getTestData() {\n    return {\n      images: tf.concat(this.testData[0]),\n      labels: tf.oneHot(tf.tensor1d(this.testData[1], 'int32'), 2).toFloat()\n    }\n  }\n}\n\nmodule.exports = new TuberculosisDataset();",
      "status": "[-]",
      "output": "<p class=\"error\">require is not defined</p>",
      "type": "code"
    },
    {
      "code": "//model.js\nconst tf = require('@tensorflow/tfjs');\n\nconst kernel_size = [3, 3]\nconst pool_size= [2, 2]\nconst first_filters = 32\nconst second_filters = 64\nconst third_filters = 128\nconst dropout_conv = 0.3\nconst dropout_dense = 0.3\n\nconst model = tf.sequential();\nmodel.add(tf.layers.conv2d({\n  inputShape: [96, 96, 3],\n  filters: first_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: first_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.maxPooling2d({poolSize: pool_size}));\nmodel.add(tf.layers.dropout({rate: dropout_conv}));\n\nmodel.add(tf.layers.conv2d({\n  filters: second_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: second_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: second_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.maxPooling2d({poolSize: pool_size}));\nmodel.add(tf.layers.dropout({rate: dropout_conv}));\n\nmodel.add(tf.layers.conv2d({\n  filters: third_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: third_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: third_filters,\n  kernelSize: kernel_size,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.maxPooling2d({poolSize: pool_size}));\nmodel.add(tf.layers.dropout({rate: dropout_conv}));\n\nmodel.add(tf.layers.flatten());\n\nmodel.add(tf.layers.dense({units: 256, activation: 'relu'}));\nmodel.add(tf.layers.dropout({rate: dropout_dense}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));\n\nconst optimizer = tf.train.adam(0.0001);\nmodel.compile({\n  optimizer: optimizer,\n  loss: 'binaryCrossentropy',\n  metrics: ['accuracy'],\n});\n\nmodule.exports = model;",
      "status": "[-]",
      "output": "<p class=\"error\">require is not defined</p>",
      "type": "code"
    },
    {
      "code": "//web",
      "status": "[7]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "//predict.js\n$(\"#image-selector\").change(function () {\n\tlet reader = new FileReader();\n\treader.onload = function () {\n\t\tlet dataURL = reader.result;\n\t\t$(\"#selected-image\").attr(\"src\", dataURL);\n\t\t$(\"#prediction-list\").empty();\n\t}\n\t\n\tlet file = $(\"#image-selector\").prop('files')[0];\n\treader.readAsDataURL(file);\n});\n\nlet model;\n$( document ).ready(async function () {\n\t$('.progress-bar').show();\n    console.log( \"Loading model...\" );\n    model = await tf.loadLayersModel('model/model.json');\n    console.log( \"Model loaded.\" );\n\t$('.progress-bar').hide();\n});\n\n$(\"#predict-button\").click(async function () {\n\tlet image = $('#selected-image').get(0);\n\t\n\t// Pre-process the image\n\tlet tensor = tf.browser.fromPixels(image)\n\t\t.resizeNearestNeighbor([96,96]) // change the image size here\n\t\t.toFloat()\n\t\t.div(tf.scalar(255.0))\n\t\t.expandDims();\n\n\tlet predictions = await model.predict(tensor).data();\n\tlet top5 = Array.from(predictions)\n\t\t.map(function (p, i) { // this is Array.map\n\t\t\treturn {\n\t\t\t\tprobability: p,\n\t\t\t\tclassName: TARGET_CLASSES[i] // we are selecting the value from the obj\n\t\t\t};\n\t\t}).sort(function (a, b) {\n\t\t\treturn b.probability - a.probability;\n\t\t}).slice(0, 2);\n\n\t$(\"#prediction-list\").empty();\n\ttop5.forEach(function (p) {\n\t\t$(\"#prediction-list\").append(`<li>${p.className}: ${p.probability.toFixed(6)}</li>`);\n\t\t});\n});",
      "status": "[-]",
      "output": "<p class=\"error\">$ is not defined</p>",
      "type": "code"
    },
    {
      "code": "//targetclasses.js\nTARGET_CLASSES = {\n  0: \"Normal\",\n  1: \"Tuberculosis\"\n};",
      "status": "[8]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "{\n  \"0\": \"Normal\",\n  \"1\": \"Tuberculosis\"\n} <br>",
      "type": "code"
    },
    {
      "code": "//server.js\nlet express = require(\"express\");\nlet app = express();\n\napp.use(express.static(\"./static\"));\n\napp.listen(81, function() {\n    console.log(\"Listening on port 81\");\n});",
      "status": "[-]",
      "output": "<p class=\"error\">require is not defined</p>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}